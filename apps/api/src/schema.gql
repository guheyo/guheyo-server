# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddBidInput {
  auctionId: String!
  bidderId: String!
  id: ID!
  price: Int!
  priceCurrency: String!
  source: String!
}

type AuctionResponse {
  bids: [BidResponse!]!
  brandId: String
  businessFunction: String!
  createdAt: DateTime!
  description: String
  endedAt: DateTime!
  groupId: String!
  id: ID!
  images: [UserImageResponse!]!
  name: String!
  price: Int!
  priceCurrency: String!
  productCategoryId: String!
  seller: AuthorResponse!
  slug: String
  source: String!
  status: String!
  updatedAt: DateTime!
}

type AuctionResponseEdge {
  cursor: String!
  node: AuctionResponse!
}

type AuthorResponse {
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  members: [MemberWithRolesResponse!]!
  socialAccounts: [SocialAccountWithoutAuthResponse!]!
  username: String!
}

type BidResponse {
  auctionId: ID!
  bidder: AuthorResponse!
  canceledAt: DateTime!
  createdAt: DateTime!
  id: ID!
  price: Int!
  priceCurrency: String!
  source: String!
  status: String!
}

input CancelBidInput {
  auctionId: String!
  bidderId: String!
}

input ConnectRolesInput {
  groupId: ID!
  roleIds: [ID!]!
  roleNames: [String!]!
  userId: ID!
}

input CreateAuctionInput {
  brandId: String
  businessFunction: String!
  createdAt: DateTime!
  description: String!
  endedAt: DateTime!
  groupId: ID!
  id: ID!
  name: String!
  productCategoryId: String!
  sellerId: String!
  source: String!
  status: String! = "OPEN"
}

input CreateDemandInput {
  brandId: String
  businessFunction: String!
  buyerId: String!
  description: String!
  groupId: ID!
  id: ID!
  name: String!
  price: Int!
  priceCurrency: String!
  productCategoryId: String!
  source: String!
  status: String! = "OPEN"
}

input CreateDiscordMessageInput {
  discordChannelId: String
  discordGuildId: String
  discordMessageId: String
  groupId: ID!
  modelId: ID!
  modelName: String!
}

input CreateGroupInput {
  description: String
  icon: String
  id: ID!
  name: String!
  position: Int
}

input CreateManyUserImageInput {
  data: [CreateUserImageInput!]!
}

input CreateMemberInput {
  groupId: ID!
  id: ID!
  userId: ID!
}

input CreateOfferInput {
  brandId: String
  businessFunction: String!
  description: String!
  groupId: ID!
  id: ID!
  name: String!
  price: Int!
  priceCurrency: String!
  productCategoryId: String!
  sellerId: String!
  source: String!
  status: String! = "OPEN"
}

input CreateRoleInput {
  groupId: ID!
  hexColor: String! = "#000000"
  id: ID!
  name: String!
  position: Int
}

input CreateSessionInput {
  expires: DateTime!
  id: ID!
  sessionToken: String!
  userId: ID!
}

input CreateSocialAccountInput {
  accessToken: String
  expiresAt: Int
  id: ID!
  idToken: String
  provider: String!
  refreshToken: String
  scope: String
  sessionState: String
  socialId: String!
  tokenType: String
  userId: String!
}

input CreateSwapInput {
  brandId: String
  businessFunction: String!
  description0: String!
  description1: String!
  groupId: ID!
  id: ID!
  name0: String!
  name1: String!
  price: Int!
  priceCurrency: String!
  productCategoryId: String!
  proposerId: String!
  source: String!
  status: String! = "OPEN"
}

input CreateUserImageInput {
  contentType: String
  description: String
  height: Int
  id: ID!
  name: String!
  position: Int!
  refId: ID!
  source: String!
  type: String!
  url: String!
  userId: ID!
  width: Int
}

input CreateUserInput {
  avatarURL: String
  id: String!
  name: String
  phoneNumber: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DemandResponse {
  brandId: String
  businessFunction: String!
  buyer: AuthorResponse!
  createdAt: DateTime!
  description: String
  groupId: String!
  id: ID!
  images: [UserImageResponse!]!
  name: String!
  price: Int!
  priceCurrency: String!
  productCategoryId: String!
  slug: String
  source: String!
  status: String!
  updatedAt: DateTime!
}

type DemandResponseEdge {
  cursor: String!
  node: DemandResponse!
}

input DisconnectRolesInput {
  id: ID!
  roleIds: [ID!]!
  roleNames: [String!]!
}

type GroupPreviewResponse {
  demands: [DemandResponse!]!
  description: String
  icon: String
  id: ID!
  name: String!
  offers: [OfferResponse!]!
  position: Int
  slug: String
}

type GroupResponse {
  description: String
  icon: String
  id: ID!
  name: String!
  position: Int
  postCategories: [PostCategoryResponse!]!
  productCategories: [ProductCategoryResponse!]!
  roles: [RoleResponse!]!
  slug: String
}

type GroupResponseEdge {
  cursor: String!
  node: GroupResponse!
}

type JwtResponse {
  accessToken: String!
  refreshToken: String!
}

type MemberWithRolesResponse {
  createdAt: DateTime!
  groupId: String!
  id: ID!
  roles: [RoleResponse!]!
  userId: String!
}

type Mutation {
  addBid(input: AddBidInput!): String!
  cancelBid(input: CancelBidInput!): String!
  connectRoles(input: ConnectRolesInput!): String!
  createAuction(input: CreateAuctionInput!): String!
  createDemand(input: CreateDemandInput!): String!
  createDiscordMessage(input: CreateDiscordMessageInput!): String!
  createGroup(input: CreateGroupInput!): String!
  createManyUserImage(input: CreateManyUserImageInput!): String!
  createMember(input: CreateMemberInput!): String!
  createOffer(input: CreateOfferInput!): String!
  createRole(input: CreateRoleInput!): String!
  createSession(input: CreateSessionInput!): String!
  createSocialAccount(input: CreateSocialAccountInput!): String!
  createSwap(input: CreateSwapInput!): String!
  createUser(input: CreateUserInput!): String!
  createUserImage(input: CreateUserImageInput!): String!
  deleteAuction(id: ID!): String!
  deleteDemand(id: ID!): String!
  deleteGroup(id: ID!): String!
  deleteMember(id: ID!, userId: ID!): String!
  deleteOffer(id: ID!): String!
  deleteRole(id: ID!): String!
  deleteSession(sessionToken: String!): String!
  deleteSocialAccount(id: ID!): String!
  deleteSocialAccountByProvider(provider: String!, socialId: String!): String!
  deleteSwap(id: ID!): String!
  deleteUser(id: ID!): String!
  deleteUserImage(id: ID!): String!
  disconnectRoles(input: DisconnectRolesInput!): String!
  logout: String!
  refreshToken: JwtResponse!
  updateAuction(input: UpdateAuctionInput!): String!
  updateDemand(input: UpdateDemandInput!): String!
  updateGroup(input: UpdateGroupInput!): String!
  updateMember(input: UpdateMemberInput!): String!
  updateOffer(input: UpdateOfferInput!): String!
  updateRole(input: UpdateRoleInput!): String!
  updateSession(input: UpdateSessionInput!): String!
  updateSocialAccount(input: UpdateSocialAccountInput!): String!
  updateSwap(input: UpdateSwapInput!): String!
  updateUser(input: UpdateUserInput!): String!
  updateUserImage(input: UpdateUserImageInput!): String!
}

type MyUserResponse {
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  members: [MemberWithRolesResponse!]!
  name: String
  phoneNumber: String
  socialAccounts: [SocialAccountResponse!]!
  username: String!
}

type OfferResponse {
  brandId: String
  businessFunction: String!
  createdAt: DateTime!
  description: String
  groupId: String!
  id: ID!
  images: [UserImageResponse!]!
  name: String!
  price: Int!
  priceCurrency: String!
  productCategoryId: String!
  seller: AuthorResponse!
  slug: String
  source: String!
  status: String!
  thumbnail: UserImageResponse
  updatedAt: DateTime!
}

type OfferResponseEdge {
  cursor: String!
  node: OfferResponse!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type PaginatedAuctionsResponse {
  edges: [AuctionResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedDemandsResponse {
  edges: [DemandResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedGroupsResponse {
  edges: [GroupResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedOffersResponse {
  edges: [OfferResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedSwapsResponse {
  edges: [SwapResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedUsersResponse {
  edges: [UserResponseEdge!]!
  pageInfo: PageInfo!
}

type PostCategoryResponse {
  description: String
  id: ID!
  name: String!
  position: Int
  slug: String
}

type ProductCategoryResponse {
  description: String
  id: ID!
  name: String!
  position: Int
  slug: String
}

type Query {
  findAuctionById(id: ID!): AuctionResponse
  findAuctions(cursor: ID, productCategoryId: ID, skip: Int! = 1, take: Int!): PaginatedAuctionsResponse!
  findDemand(slug: String!): DemandResponse
  findDemandById(id: ID!): DemandResponse
  findDemands(cursor: ID, productCategoryId: ID!, skip: Int! = 1, take: Int!): PaginatedDemandsResponse!
  findGroup(slug: String): GroupResponse
  findGroupById(id: ID!): GroupResponse
  findGroupPreviews: [GroupPreviewResponse!]!
  findGroups(cursor: ID, skip: Int! = 1, take: Int!): PaginatedGroupsResponse!
  findMemberByUserAndGroup(groupId: ID!, userId: ID!): MemberWithRolesResponse
  findMyUserById(id: ID!): MyUserResponse
  findMyUserByUsername(username: ID!): MyUserResponse
  findOffer(slug: String!): OfferResponse
  findOfferById(id: ID!): OfferResponse
  findOffers(cursor: ID, productCategoryId: ID!, skip: Int! = 1, take: Int!): PaginatedOffersResponse!
  findRoleById(id: ID!): RoleResponse
  findSession(sessionToken: String!): SessionResponse
  findSwap(slug: String!): SwapResponse
  findSwapById(id: ID!): SwapResponse
  findSwaps(cursor: ID, productCategoryId: ID!, skip: Int! = 1, take: Int!): PaginatedSwapsResponse!
  findTerm(name: String!): TermResponse
  findUser(provider: String, sessionToken: String, socialId: String): UserResponse
  findUserImageById(id: ID!): UserImageResponse
  findUserImagesOfRef(refId: ID!, type: String!): [UserImageResponse!]!
  findUsers(cursor: ID, skip: Int! = 1, take: Int!): PaginatedUsersResponse!
  getSocialAccountsByUserId(id: ID!): String!
}

type RoleResponse {
  groupId: ID!
  hexColor: String!
  id: ID!
  name: String!
  position: Int
}

type SessionResponse {
  expires: DateTime!
  sessionToken: String!
  userId: String!
}

type SocialAccountResponse {
  accessToken: String
  createdAt: DateTime!
  expiresAt: Int
  id: ID!
  idToken: String
  provider: String!
  refreshToken: String
  scope: String
  sessionState: String
  socialId: String!
  tokenType: String
  userId: String!
}

type SocialAccountWithoutAuthResponse {
  createdAt: DateTime!
  id: ID!
  provider: String!
  socialId: String!
  userId: String!
}

type SwapResponse {
  brandId: String
  businessFunction: String!
  createdAt: DateTime!
  description0: String
  description1: String
  groupId: String!
  id: ID!
  images: [UserImageResponse!]!
  name0: String!
  name1: String!
  price: Int!
  priceCurrency: String!
  productCategoryId: String!
  proposer: AuthorResponse!
  slug: String
  source: String!
  status: String!
  thumbnail: UserImageResponse
  updatedAt: DateTime!
}

type SwapResponseEdge {
  cursor: String!
  node: SwapResponse!
}

type TermResponse {
  content: String!
  createdAt: DateTime!
  id: ID!
  metaDescription: String!
  metaTitle: String!
  name: String!
  title: String!
  updatedAt: DateTime!
}

input UpdateAuctionInput {
  brandId: String
  businessFunction: String
  description: String
  id: ID!
  name: String
}

input UpdateDemandInput {
  brandId: String
  businessFunction: String
  description: String
  id: ID!
  name: String
  price: Int
  priceCurrency: String
  source: String!
}

input UpdateGroupInput {
  description: String
  icon: String
  id: ID!
  name: String
  position: Int
}

input UpdateMemberInput {
  id: ID!
  userId: ID!
}

input UpdateOfferInput {
  brandId: String
  businessFunction: String
  description: String
  id: ID!
  name: String
  price: Int
  priceCurrency: String
  source: String!
}

input UpdateRoleInput {
  hexColor: String
  id: ID!
  name: String
  position: Int
}

input UpdateSessionInput {
  expires: DateTime
  sessionToken: String!
  userId: ID
}

input UpdateSocialAccountInput {
  accessToken: String
  expiresAt: Int
  id: ID
  idToken: String
  provider: String
  refreshToken: String
  scope: String
  sessionState: String
  socialId: String
  tokenType: String
  userId: ID
}

input UpdateSwapInput {
  brandId: String
  businessFunction: String
  description0: String
  description1: String
  id: ID!
  name0: String
  name1: String
  price: Int
  priceCurrency: String
  source: String!
}

input UpdateUserImageInput {
  id: ID!
  position: Int!
}

input UpdateUserInput {
  avatarURL: String
  id: String!
  name: String
  phoneNumber: String
  username: String
}

type UserImageResponse {
  contentType: String
  createdAt: DateTime!
  description: String
  height: Int
  id: String!
  name: String!
  position: Int!
  refId: ID!
  source: String!
  type: String!
  updatedAt: DateTime!
  url: String!
  userId: ID!
  width: Int
}

type UserResponse {
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  username: String!
}

type UserResponseEdge {
  cursor: String!
  node: UserResponse!
}