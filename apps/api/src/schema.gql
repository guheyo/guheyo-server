# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ConnectRolesInput {
  id: ID!
  roleIds: [ID!]!
}

input CreateGuildInput {
  description: String
  icon: String
  id: ID!
  name: String!
  rank: Int
}

input CreateMemberInput {
  guildId: ID!
  id: ID!
  userId: ID!
}

input CreateRoleInput {
  guildId: ID!
  hexColor: String! = "#000000"
  id: ID!
  name: String!
  rank: Int
}

input CreateSocialAccountInput {
  accessToken: String
  expiresAt: Int
  id: ID!
  idToken: String
  provider: String!
  refreshToken: String
  scope: String
  sessionState: String
  socialId: String!
  tokenType: String
  userId: String!
}

input CreateUserInput {
  avatarURL: String
  id: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DisconnectRolesInput {
  id: ID!
  roleIds: [ID!]!
}

type Edge {
  cursor: String!
  node: UserResponse!
}

type GuildResponse {
  description: String
  icon: String
  id: ID!
  name: String!
  rank: Int
  roles: [RoleResponse!]!
}

type MemberWithRolesResponse {
  createdAt: DateTime!
  guildId: String!
  id: ID!
  roles: [RoleResponse!]!
  userId: String!
}

type Mutation {
  connectRoles(input: ConnectRolesInput!): String!
  createGuild(input: CreateGuildInput!): String!
  createMember(input: CreateMemberInput!): String!
  createRole(input: CreateRoleInput!): String!
  createSocialAccount(input: CreateSocialAccountInput!): String!
  createUser(input: CreateUserInput!): String!
  deleteGuild(id: String!): String!
  deleteMember(id: ID!, userId: ID!): String!
  deleteRole(id: String!): String!
  deleteSocialAccount(id: String!): String!
  deleteUser(id: String!): String!
  disconnectRoles(input: DisconnectRolesInput!): String!
  updateGuild(input: UpdateGuildInput!): String!
  updateMember(input: UpdateMemberInput!): String!
  updateRole(input: UpdateRoleInput!): String!
  updateSocialAccount(input: UpdateSocialAccountInput!): String!
  updateUser(input: UpdateUserInput!): String!
}

type MyUserResponse {
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  members: [MemberWithRolesResponse!]
  name: String
  socialAccounts: [SocialAccountResponse!]
  username: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type PaginatedUsersResponse {
  edges: [Edge!]!
  pageInfo: PageInfo!
}

type Query {
  findGuildById(id: String!): GuildResponse
  findMemberByUserAndGuild(guildId: ID!, userId: ID!): MemberWithRolesResponse
  findMyUserById(id: String!): MyUserResponse
  findMyUserBySocialAccount(provider: String!, socialId: ID!): MyUserResponse
  findRoleById(id: String!): RoleResponse
  findUsers(cursor: ID, skip: Int! = 1, take: Int!): PaginatedUsersResponse!
  getSocialAccountsByUserId(id: String!): String!
}

type RoleResponse {
  guildId: ID!
  hexColor: String!
  id: ID!
  name: String!
  rank: Int
}

type SocialAccountResponse {
  accessToken: String
  createdAt: DateTime!
  expiresAt: Int
  id: ID!
  idToken: String
  provider: String!
  refreshToken: String
  scope: String
  sessionState: String
  socialId: String!
  tokenType: String
  userId: String!
}

input UpdateGuildInput {
  description: String
  icon: String
  id: ID!
  name: String
  rank: Int
}

input UpdateMemberInput {
  id: ID!
  userId: ID!
}

input UpdateRoleInput {
  hexColor: String
  id: ID!
  name: String
  rank: Int
}

input UpdateSocialAccountInput {
  accessToken: String
  expiresAt: Int
  id: String!
  idToken: String
  refreshToken: String
  scope: String
  sessionState: String
  tokenType: String
  userId: String!
}

input UpdateUserInput {
  avatarURL: String
  id: String!
  name: String
}

type UserResponse {
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  name: String
  username: String!
}