# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

union AuctionInteractionItemResponse = BidResponse | CommentWithAuthorResponse

type AuctionInteractionItemResponseEdge {
  cursor: String!
  node: AuctionInteractionItemResponse!
}

type AuctionPreviewResponse {
  content: String
  createdAt: DateTime!
  currentBidPrice: Int
  extendedEndDate: DateTime!
  hammerPrice: Int!
  hasSubmittedReview: Boolean
  id: ID!
  originalEndDate: DateTime!
  post: PostPreviewWithUserResponse!
  shippingCost: Int!
  shippingType: String!
  status: String!
  updatedAt: DateTime!
  version: Int!
}

type AuctionPreviewResponseEdge {
  cursor: String!
  node: AuctionPreviewResponse!
}

type AuctionResponse {
  content: String
  createdAt: DateTime!
  currentBidPrice: Int
  extendedEndDate: DateTime!
  hammerPrice: Int!
  hasSubmittedReview: Boolean
  id: ID!
  originalEndDate: DateTime!
  post: PostResponse!
  shippingCost: Int!
  shippingType: String!
  status: String!
  updatedAt: DateTime!
  version: Int!
}

type AuthorResponse {
  about: String
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  roles: [RoleResponse!]!
  socialAccounts: [SocialAccountWithoutAuthResponse!]!
  username: String!
}

type BidCountResponse {
  auctionId: ID!
  count: Int!
}

type BidResponse {
  auctionId: ID!
  canceledAt: DateTime
  createdAt: DateTime!
  id: ID!
  price: Int!
  priceCurrency: String!
  status: String!
  user: AuthorResponse!
}

type BidResponseEdge {
  cursor: String!
  node: BidResponse!
}

type BrandResponse {
  createdAt: DateTime!
  description: String
  groups: [GroupProfileResponse!]!
  id: ID!
  links: [LinkResponse!]!
  logo: String
  name: String!
  slug: String
}

type BrandResponseEdge {
  cursor: String!
  node: BrandResponse!
}

input BumpOfferInput {
  id: ID!
  newPrice: Int!
  offerId: ID!
}

input CancelBidInput {
  auctionId: String!
  bidId: String!
}

type CancelBidResponse {
  canceledAt: DateTime!
  id: ID!
}

input CancelReactionInput {
  commentId: ID
  emojiId: ID!
  postId: ID!
}

type CanceledReactionResponse {
  commentId: ID
  id: ID!
  postId: ID!
}

type CategoryResponse {
  description: String
  id: ID!
  name: String!
  position: Int
  slug: String
  type: String!
}

type CommentCountResponse {
  count: Int!
  postId: ID!
}

input CommentReportInput {
  content: String!
  id: ID!
  reportId: ID!
}

type CommentResponse {
  content: String
  createdAt: DateTime!
  id: ID!
  parentId: ID
  pinned: Boolean!
  postId: ID!
  reactions: [ReactionResponse!]!
  updatedAt: DateTime!
}

type CommentWithAuthorResponse {
  content: String
  createdAt: DateTime!
  id: ID!
  images: [UserImageResponse!]!
  parentId: ID
  pinned: Boolean!
  postId: ID!
  reactions: [ReactionResponse!]!
  updatedAt: DateTime!
  user: AuthorResponse!
}

type CommentWithAuthorResponseEdge {
  cursor: String!
  node: CommentWithAuthorResponse!
}

input CreateAuctionInput {
  content: String!
  createdAt: DateTime!
  extendedEndDate: DateTime!
  id: ID!
  originalEndDate: DateTime!
  post: CreatePostInput!
  shippingCost: Int!
  shippingType: String!
  status: String! = "live"
}

input CreateBrandInput {
  description: String
  groupIds: [ID!]!
  id: ID!
  links: [CreateLinkInput!]!
  logo: String
  name: String!
  slug: String
}

input CreateCommentInput {
  content: String
  createdAt: DateTime
  id: ID!
  pinned: Boolean!
  postId: ID!
  updatedAt: DateTime
}

input CreateGroupInput {
  description: String
  icon: String
  id: ID!
  name: String!
  position: Int!
  slug: String!
}

input CreateLinkInput {
  brandId: ID!
  id: ID!
  platformId: ID!
  position: Int!
  url: String!
}

input CreateManyUserImageInput {
  createUserImageInputs: [CreateUserImageInput!]!
}

input CreateOfferInput {
  businessFunction: String!
  content: String
  id: ID!
  name0: String
  name1: String
  post: CreatePostInput!
  price: Int!
  priceCurrency: String!
  shippingCost: Int!
  shippingType: String!
  status: String! = "open"
}

input CreatePostInput {
  categoryId: ID
  createdAt: DateTime
  groupId: ID!
  id: ID
  tagIds: [ID!]
  tagNames: [String!]
  title: String!
  type: String!
  updatedAt: DateTime
}

input CreateReactionInput {
  commentId: ID
  emojiId: ID!
  id: ID!
  postId: ID!
}

input CreateReportInput {
  description: String
  groupId: ID!
  id: ID!
  reason: String!
  reportedCommentId: ID
  reportedPostId: ID
  reportedUserId: ID!
  type: String!
}

input CreateRoleInput {
  groupId: ID!
  hexColor: String! = "#000000"
  id: ID!
  name: String!
  position: Int
}

input CreateSignedUrlInput {
  filename: String!
  type: String!
}

input CreateThreadInput {
  content: String
  id: ID!
  post: CreatePostInput!
}

input CreateUserImageInput {
  contentType: String
  description: String
  height: Int
  id: ID!
  position: Int!
  refId: ID!
  size: Int
  type: String!
  url: String!
  width: Int
}

input CreateUserReviewInput {
  auctionId: ID
  content: String
  id: ID!
  offerId: ID
  post: CreatePostInput!
  rating: Int!
  reviewedUserId: ID!
  status: String! = "oneWay"
  type: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteCommentInput {
  id: ID!
}

type DeletedCommentResponse {
  id: ID!
}

type EmojiResponse {
  groupId: ID
  id: ID!
  name: String!
  position: Int!
  url: String
}

input FindAuctionInteractionItemsOrderByInput {
  createdAt: String
}

input FindAuctionInteractionItemsWhereInput {
  auctionId: ID
  postId: ID
  status: String
  userId: ID
  view: String
}

input FindAuctionPreviewsOrderByInput {
  createdAt: String
  currentBidPrice: String
  extendedEndDate: String
}

input FindAuctionPreviewsWhereInput {
  bidderId: ID
  categoryId: ID
  createdAt: JSON
  groupId: ID
  pending: String
  status: String
  userId: ID
}

input FindBiddersOrderByInput {
  createdAt: String
}

input FindBiddersWhereInput {
  auctionId: ID!
}

input FindBidsOrderByInput {
  createdAt: String
}

input FindBidsWhereInput {
  auctionId: ID
  status: String
  userId: ID
}

input FindBrandsOrderByInput {
  createdAt: String
}

input FindBrandsWhereInput {
  groupId: ID
}

input FindCommentsOrderByInput {
  createdAt: String
}

input FindCommentsWhereInput {
  pinned: Boolean
  postId: ID
  userId: ID
}

input FindOfferPreviewsOrderByInput {
  bumpedAt: String
  price: String
}

input FindOfferPreviewsWhereInput {
  bumpedAt: JSON
  businessFunction: String
  categoryId: ID
  groupId: ID
  isArchived: Boolean
  pending: String
  status: String
  userId: ID
}

input FindReportPreviewsOrderByInput {
  createdAt: String
}

input FindReportPreviewsWhereInput {
  createdAt: JSON
  groupId: ID
  refId: ID
  reportedUserId: ID
  status: String
  type: String
  userId: ID
}

input FindThreadPreviewsOrderByInput {
  createdAt: String
}

input FindThreadPreviewsWhereInput {
  categoryId: ID
  categoryType: String
  createdAt: JSON
  groupId: ID
  pending: String
  tagNames: [String!]
  userId: ID
}

input FindUserReviewPreviewsOrderByInput {
  createdAt: String
}

input FindUserReviewPreviewsWhereInput {
  createdAt: JSON
  groupId: ID
  pending: String
  reviewedUserId: ID
  tagNames: [String!]
  tagType: String
  userId: ID
}

input FindUsersOrderByInput {
  createdAt: String
}

input FindUsersWhereInput {
  userId: ID
}

input FollowBrandInput {
  brandId: ID!
}

type GroupPreviewResponse {
  buys: [OfferPreviewResponse!]!
  description: String
  icon: String
  id: ID!
  name: String!
  position: Int!
  sells: [OfferPreviewResponse!]!
  slug: String
}

type GroupProfileResponse {
  description: String
  icon: String
  id: ID!
  name: String!
  slug: String
}

type GroupProfileResponseEdge {
  cursor: String!
  node: GroupProfileResponse!
}

type GroupResponse {
  categories: [CategoryResponse!]!
  description: String
  icon: String
  id: ID!
  name: String!
  position: Int
  roles: [RoleResponse!]!
  slug: String
}

type GroupResponseEdge {
  cursor: String!
  node: GroupResponse!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JwtResponse {
  accessToken: String!
  refreshToken: String!
}

type LastReportResponse {
  createdAt: DateTime!
  id: ID!
}

type LinkResponse {
  brandId: ID!
  createdAt: DateTime!
  id: ID!
  platform: PlatformResponse!
  position: Int!
  url: String!
}

input LinkSocialProfileInput {
  provider: String!
}

type Mutation {
  bumpOffer(input: BumpOfferInput!): OfferPreviewResponse!
  cancelBid(input: CancelBidInput!): String!
  cancelReaction(input: CancelReactionInput!): String!
  commentReport(input: CommentReportInput!): ReportCommentResponse!
  createAuction(input: CreateAuctionInput!): String!
  createBrand(input: CreateBrandInput!): BrandResponse!
  createComment(input: CreateCommentInput!): String!
  createGroup(input: CreateGroupInput!): String!
  createManyUserImage(input: CreateManyUserImageInput!): String!
  createOffer(input: CreateOfferInput!): String!
  createReaction(input: CreateReactionInput!): String!
  createReport(input: CreateReportInput!): String!
  createRole(input: CreateRoleInput!): String!
  createSignedUrl(input: CreateSignedUrlInput!): SignedUrlResponse!
  createThread(input: CreateThreadInput!): String!
  createUserImage(input: CreateUserImageInput!): String!
  createUserReview(input: CreateUserReviewInput!): String!
  deleteComment(input: DeleteCommentInput!): String!
  deleteOffer(id: ID!): String!
  deleteRole(id: ID!): String!
  deleteThread(id: ID!): String!
  deleteUserImage(id: ID!): String!
  deleteUserReview(id: ID!): String!
  followBrand(input: FollowBrandInput!): BrandResponse!
  linkSocialProfile(input: LinkSocialProfileInput!): String!
  logout: SocialUserResponse!
  placeBid(input: PlaceBidInput!): String!
  reGenerateTokens: JwtResponse!
  refreshTokens: JwtResponse!
  unfollowBrand(input: UnfollowBrandInput!): BrandResponse!
  updateAuction(input: UpdateAuctionInput!): String!
  updateComment(input: UpdateCommentInput!): String!
  updateGroup(input: UpdateGroupInput!): String!
  updateOffer(input: UpdateOfferInput!): OfferPreviewResponse!
  updateReportComment(input: UpdateReportCommentInput!): ReportCommentResponse!
  updateRole(input: UpdateRoleInput!): String!
  updateThread(input: UpdateThreadInput!): String!
  updateUser(input: UpdateUserInput!): String!
  updateUserImage(input: UpdateUserImageInput!): String!
}

type MyUserResponse {
  about: String
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  name: String
  phoneNumber: String
  roles: [RoleResponse!]!
  socialAccounts: [SocialAccountResponse!]!
  username: String!
}

type OfferPreviewResponse {
  bumpedAt: DateTime!
  businessFunction: String!
  content: String
  createdAt: DateTime!
  hasSubmittedReview: Boolean
  id: ID!
  name0: String
  name1: String
  post: PostPreviewWithUserResponse!
  price: Int!
  priceCurrency: String!
  shippingCost: Int!
  shippingType: String!
  status: String!
  totalPrice: Int!
  updatedAt: DateTime!
}

type OfferPreviewResponseEdge {
  cursor: String!
  node: OfferPreviewResponse!
}

type OfferResponse {
  bumpedAt: DateTime!
  businessFunction: String!
  content: String
  createdAt: DateTime!
  hasSubmittedReview: Boolean
  id: ID!
  name0: String
  name1: String
  post: PostResponse!
  price: Int!
  priceCurrency: String!
  shippingCost: Int!
  shippingType: String!
  status: String!
  totalPrice: Int!
  updatedAt: DateTime!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type PaginatedAuctionInteractionItemsResponse {
  edges: [AuctionInteractionItemResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedAuctionPreviewsResponse {
  edges: [AuctionPreviewResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedBidsResponse {
  edges: [BidResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedBrandsResponse {
  edges: [BrandResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedCommentsResponse {
  edges: [CommentWithAuthorResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedGroupProfilesResponse {
  edges: [GroupProfileResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedGroupsResponse {
  edges: [GroupResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedOfferPreviewsResponse {
  edges: [OfferPreviewResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedReportPreviewsResponse {
  edges: [ReportPreviewResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedThreadPreviewsResponse {
  edges: [ThreadPreviewResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedUserReviewPreviewsResponse {
  edges: [UserReviewPreviewResponseEdge!]!
  pageInfo: PageInfo!
}

type PaginatedUsersResponse {
  edges: [UserResponseEdge!]!
  pageInfo: PageInfo!
}

input PlaceBidInput {
  auctionId: String!
  id: ID!
  price: Int!
  priceCurrency: String!
}

type PlatformResponse {
  description: String
  id: ID!
  logo: String
  name: String!
  position: Int!
}

type PostPreviewWithAuthorResponse {
  archivedAt: DateTime
  category: CategoryResponse
  commentCount: Int
  createdAt: DateTime!
  group: GroupProfileResponse!
  id: ID!
  pending: String
  slug: String
  tags: [TagResponse!]!
  thumbnail: String
  title: String!
  type: String!
  updatedAt: DateTime!
  user: AuthorResponse!
}

type PostPreviewWithUserResponse {
  archivedAt: DateTime
  category: CategoryResponse
  commentCount: Int
  createdAt: DateTime!
  group: GroupProfileResponse!
  id: ID!
  pending: String
  slug: String
  tags: [TagResponse!]!
  thumbnail: String
  title: String!
  type: String!
  updatedAt: DateTime!
  user: UserResponse!
}

type PostPreviewWithoutUserResponse {
  archivedAt: DateTime
  category: CategoryResponse
  commentCount: Int
  createdAt: DateTime!
  group: GroupProfileResponse!
  id: ID!
  pending: String
  slug: String
  tags: [TagResponse!]!
  thumbnail: String
  title: String!
  type: String!
  updatedAt: DateTime!
}

type PostResponse {
  archivedAt: DateTime
  category: CategoryResponse
  commentCount: Int
  createdAt: DateTime!
  group: GroupProfileResponse!
  id: ID!
  images: [UserImageResponse!]!
  pending: String
  reportCount: Int!
  slug: String
  tags: [TagResponse!]!
  thumbnail: String
  title: String!
  type: String!
  updatedAt: DateTime!
  user: AuthorResponse!
}

type Query {
  findAuction(id: ID, slug: String): AuctionResponse
  findAuctionInteractionItems(cursor: ID, keyword: String, orderBy: FindAuctionInteractionItemsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindAuctionInteractionItemsWhereInput): PaginatedAuctionInteractionItemsResponse!
  findAuctionPreviews(cursor: ID, keyword: String, orderBy: FindAuctionPreviewsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindAuctionPreviewsWhereInput): PaginatedAuctionPreviewsResponse!
  findAuthor(id: ID, username: String): AuthorResponse
  findBidCount(auctionId: ID!): BidCountResponse!
  findBidders(cursor: ID, keyword: String, orderBy: FindBiddersOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindBiddersWhereInput!): PaginatedUsersResponse!
  findBids(cursor: ID, keyword: String, orderBy: FindBidsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindBidsWhereInput): PaginatedBidsResponse!
  findBrand(id: ID, slug: String): BrandResponse!
  findBrands(cursor: ID, keyword: String, orderBy: FindBrandsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindBrandsWhereInput): PaginatedBrandsResponse!
  findComment(id: ID, postId: ID): CommentResponse
  findCommentCount(postId: ID!): CommentCountResponse!
  findComments(cursor: ID, keyword: String, orderBy: FindCommentsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindCommentsWhereInput): PaginatedCommentsResponse!
  findEmojis(groupId: ID): [EmojiResponse!]!
  findGroup(id: ID, slug: String): GroupResponse
  findGroupPreviews: [GroupPreviewResponse!]!
  findGroupProfiles(cursor: ID, keyword: String, skip: Int! = 1, take: Int!, target: String): PaginatedGroupProfilesResponse!
  findGroups(cursor: ID, skip: Int! = 1, take: Int!): PaginatedGroupsResponse!
  findLastReport: LastReportResponse!
  findMyUser: MyUserResponse
  findOffer(id: ID, slug: String): OfferResponse
  findOfferCount(businessFunction: String!, categoryId: ID!, fromHours: Int!, userId: ID!): Float!
  findOfferPreviews(cursor: ID, keyword: String, orderBy: FindOfferPreviewsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindOfferPreviewsWhereInput): PaginatedOfferPreviewsResponse!
  findPlatforms: [PlatformResponse!]!
  findPostPreview(id: ID!): PostPreviewWithUserResponse!
  findReactions(commentId: ID, postId: ID): [ReactionResponse!]!
  findReport(id: ID!): ReportResponse!
  findReportComment(reportId: ID!): ReportCommentResponse!
  findReportPreviews(cursor: ID, keyword: String, orderBy: FindReportPreviewsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindReportPreviewsWhereInput): PaginatedReportPreviewsResponse!
  findRoleById(id: ID!): RoleResponse
  findTags: [TagResponse!]!
  findTerm(name: String!): TermResponse
  findThread(id: ID, slug: String): ThreadResponse
  findThreadPreviews(cursor: ID, keyword: String, orderBy: FindThreadPreviewsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindThreadPreviewsWhereInput): PaginatedThreadPreviewsResponse!
  findUser(provider: String, socialId: String, username: String): UserResponse
  findUserImageById(id: ID!): UserImageResponse
  findUserImagesOfRef(refId: ID!, type: String!): [UserImageResponse!]!
  findUserReview(id: ID, slug: String): UserReviewResponse
  findUserReviewPreviews(cursor: ID, keyword: String, orderBy: FindUserReviewPreviewsOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindUserReviewPreviewsWhereInput): PaginatedUserReviewPreviewsResponse!
  findUsers(cursor: ID, keyword: String, orderBy: FindUsersOrderByInput, skip: Int! = 1, take: Int!, target: String, where: FindUsersWhereInput): PaginatedUsersResponse!
  findVersion(id: ID!): VersionResponse
  findVersionPreview(id: ID, refId: ID): VersionPreviewResponse
}

type ReactionResponse {
  canceledAt: DateTime
  commentId: ID
  createdAt: DateTime!
  emoji: EmojiResponse!
  id: ID!
  postId: ID!
  updatedAt: DateTime!
  userId: ID!
}

type ReportCommentResponse {
  content: String!
  createdAt: DateTime!
  id: ID!
  reportId: ID!
  updatedAt: DateTime!
  userId: String!
}

type ReportPreviewResponse {
  createdAt: DateTime!
  description: String
  groupId: ID!
  id: ID!
  reason: String!
  reportedCommentId: ID
  reportedPostId: ID
  reportedUser: AuthorResponse!
  status: String!
  type: String!
  updatedAt: DateTime!
}

type ReportPreviewResponseEdge {
  cursor: String!
  node: ReportPreviewResponse!
}

type ReportResponse {
  comments: [ReportCommentResponse!]!
  createdAt: DateTime!
  description: String
  groupId: ID!
  id: ID!
  reason: String!
  reportedCommentId: ID
  reportedPost: PostPreviewWithoutUserResponse
  reportedPostId: ID
  reportedUser: AuthorResponse!
  status: String!
  type: String!
  updatedAt: DateTime!
  version: VersionResponse!
}

type RoleResponse {
  groupId: ID
  hexColor: String!
  id: ID!
  name: String!
  position: Int
}

type SignedUrlResponse {
  signedUrl: String!
  url: String!
}

type SocialAccountResponse {
  accessToken: String
  createdAt: DateTime!
  expiresAt: Int
  id: ID!
  idToken: String
  provider: String!
  refreshToken: String
  scope: String
  sessionState: String
  socialId: String!
  tokenType: String
  userId: String!
}

type SocialAccountWithoutAuthResponse {
  createdAt: DateTime!
  id: ID!
  provider: String!
  socialId: String!
  userId: String!
}

type SocialUserResponse {
  provider: String!
  socialId: String!
}

type Subscription {
  auctionUpdated(auctionId: ID!): UpdatedAuctionResponse!
  bidCanceled(auctionId: ID!): CancelBidResponse!
  bidPlaced(auctionId: ID!): BidResponse!
  commentCreated(postId: ID!): CommentWithAuthorResponse!
  commentDeleted(postId: ID!): DeletedCommentResponse!
  commentUpdated(postId: ID!): UpdatedCommentResponse!
  reactionCanceled(postId: ID!, type: String!): CanceledReactionResponse!
  reactionCreated(postId: ID!, type: String!): ReactionResponse!
}

type TagResponse {
  description: String
  id: ID!
  name: String!
  position: Int!
  type: String!
}

type TermResponse {
  content: String!
  createdAt: DateTime!
  id: ID!
  meta: JSON
  name: String!
  title: String!
  updatedAt: DateTime!
}

type ThreadPreviewResponse {
  content: String
  createdAt: DateTime!
  id: ID!
  post: PostPreviewWithAuthorResponse!
  updatedAt: DateTime!
}

type ThreadPreviewResponseEdge {
  cursor: String!
  node: ThreadPreviewResponse!
}

type ThreadResponse {
  content: String
  createdAt: DateTime!
  id: ID!
  post: PostResponse!
  updatedAt: DateTime!
}

input UnfollowBrandInput {
  brandId: ID!
}

input UpdateAuctionInput {
  content: String
  id: ID!
  post: UpdatePostInput!
}

input UpdateCommentInput {
  content: String
  id: ID!
  pinned: Boolean!
}

input UpdateGroupInput {
  description: String
  icon: String
  id: ID!
  name: String
  position: Int
  slug: String
}

input UpdateOfferInput {
  content: String
  id: ID!
  name0: String
  name1: String
  post: UpdatePostInput!
  price: Int
  priceCurrency: String
  shippingCost: Int
  shippingType: String
  status: String
}

input UpdatePostInput {
  archivedAt: DateTime
  categoryId: ID
  pending: String
  tagIds: [ID!]
  title: String
}

input UpdateReportCommentInput {
  content: String!
  id: ID!
  reportId: ID!
}

input UpdateRoleInput {
  hexColor: String
  id: ID!
  name: String
  position: Int
}

input UpdateThreadInput {
  content: String
  id: ID!
  post: UpdatePostInput!
}

input UpdateUserImageInput {
  id: ID!
  position: Int!
}

input UpdateUserInput {
  about: String
  avatarURL: String
  id: String!
  name: String
  phoneNumber: String
  username: String
}

type UpdatedAuctionResponse {
  extendedEndDate: DateTime!
  id: ID!
  status: String!
  updatedAt: DateTime!
}

type UpdatedCommentResponse {
  content: String!
  id: ID!
  pinned: Boolean!
  updatedAt: DateTime!
}

type UserImageResponse {
  contentType: String
  createdAt: DateTime!
  description: String
  height: Int
  id: String!
  name: String!
  position: Int!
  refId: ID!
  size: Int
  type: String!
  updatedAt: DateTime!
  url: String!
  userId: ID!
  width: Int
}

type UserResponse {
  about: String
  avatarURL: String
  bot: Boolean!
  createdAt: DateTime!
  id: ID!
  username: String!
}

type UserResponseEdge {
  cursor: String!
  node: UserResponse!
}

type UserReviewPreviewResponse {
  auctionId: String
  content: String
  createdAt: DateTime!
  id: ID!
  offerId: String
  post: PostPreviewWithAuthorResponse!
  rating: Int!
  reviewedUser: AuthorResponse!
  status: String!
  type: String!
  updatedAt: DateTime!
}

type UserReviewPreviewResponseEdge {
  cursor: String!
  node: UserReviewPreviewResponse!
}

type UserReviewResponse {
  auctionId: String
  content: String
  createdAt: DateTime!
  id: ID!
  offerId: String
  post: PostResponse!
  rating: Int!
  reviewedUser: AuthorResponse!
  status: String!
  type: String!
  updatedAt: DateTime!
}

type VersionPreviewResponse {
  createdAt: DateTime!
  id: ID!
  op: String!
  refId: ID!
  schemaName: String!
  tableName: String!
  values: JSON!
}

type VersionResponse {
  createdAt: DateTime!
  id: ID!
  images: [UserImageResponse!]!
  op: String!
  refId: ID!
  schemaName: String!
  tableName: String!
  values: JSON!
}