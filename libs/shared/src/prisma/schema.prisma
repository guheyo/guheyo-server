datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
  schemas  = ["public", "audit"]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "multiSchema"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// NOTE: Used for code generation only

// generator prismaClassGenerator {
//   provider = "prisma-class-generator"
//   output = "./gen"
//   dryRun = false
// }

model User {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  username          String        @unique
  name              String?
  about             String?
  phoneNumber       String?       @unique
  socialAccounts    SocialAccount[]
  avatarURL         String?
  bot               Boolean       @default(false)
  members           Member[]
  userImages        UserImage[]
  bids              Bid[]
  comments          Comment[]
  posts             Post[]
  receivedReports   Report[]      @relation("receivedReports")
  receivedReviews   UserReview[]  @relation("receivedUserReviews")

  @@schema("public")
}

model UserImage {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  name              String
  url               String
  contentType       String?
  description       String?
  size              Int?
  height            Int?
  width             Int?
  position          Int
  type              String
  refId             String
  tracked           Boolean
  source            String
  userId            String
  user              User          @relation(fields: [userId], references: [id])

  @@schema("public")
}

model Member {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  groupId           String
  group             Group       @relation(fields: [groupId], references: [id])
  roles             Role[]

  @@schema("public")
}

model SocialAccount {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  provider          String
  socialId          String
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  tokenType         String?
  scope             String?

  @@unique([provider, socialId])

  @@schema("public")
}

model Role {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updateedAt        DateTime    @updatedAt
  deletedAt         DateTime?
  name              String      @unique
  position          Int
  hexColor          String      @default("#7f838e")
  groupId           String
  group             Group       @relation(fields: [groupId], references: [id])
  members           Member[]

  @@schema("public")
}

model Group {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String      @unique
  slug              String?
  description       String?
  icon              String?
  position          Int
  members           Member[]
  roles             Role[]
  brands            Brand[]
  categories        Category[]
  posts             Post[]

  @@schema("public")
}

model Category {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  type              String
  name              String
  slug              String?
  description       String?
  position          Int
  groupId           String
  group             Group       @relation(fields: [groupId], references: [id])
  posts             Post[]

  @@schema("public")
}

model Brand {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String
  slug              String?
  description       String?
  logo              String?
  position          Int
  groups            Group[]
  posts             Post[]

  @@schema("public")
}

model Post {
  id                  String        @id @default(uuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deletedAt           DateTime?
  archivedAt          DateTime?
  pending             String?
  type                String
  title               String
  slug                String?
  content             String
  source              String
  reportCount         Int           @default(0)
  reportCommentCount  Int           @default(0)
  groupId             String
  group               Group         @relation(fields: [groupId], references: [id])
  categoryId          String
  category            Category      @relation(fields: [categoryId], references: [id])
  userId              String
  user                User          @relation(fields: [userId], references: [id])
  offer               Offer?
  demand              Demand?
  swap                Swap?
  auction             Auction?
  userReview          UserReview?
  report              Report?
  comments            Comment[]
  tags                Tag[]
  brands              Brand[]
  bumps               Bump[]
  reports             Report[]      @relation(name: "postReports")
  userReviews         UserReview[]  @relation(name: "postReviews")

  @@schema("public")
}

model Comment {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  source            String
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  postId            String
  post              Post          @relation(fields: [postId], references: [id])
  content           String
  parentId          String?
  parent            Comment?      @relation("ChildComments", fields: [parentId], references: [id])
  replies           Comment[]     @relation("ChildComments")
  reports           Report[]

  @@schema("public")
}

model Offer {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
  postId              String          @unique()
  post                Post            @relation(fields: [postId], references: [id])
  price               Int
  priceCurrency       String
  shippingCost        Int             @default(0)
  shippingType        String          @default("free")
  businessFunction    String
  status              String

  @@schema("public")
}

model Demand {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
  postId              String          @unique()
  post                Post            @relation(fields: [postId], references: [id])
  price               Int
  priceCurrency       String
  shippingCost        Int             @default(0)
  shippingType        String          @default("free")
  businessFunction    String
  status              String

  @@schema("public")
}

model Swap {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
  postId              String          @unique()
  post                Post            @relation(fields: [postId], references: [id])
  name0               String
  name1               String
  price               Int
  priceCurrency       String
  shippingCost        Int             @default(0)
  shippingType        String          @default("free")
  businessFunction    String
  status              String

  @@schema("public")
}

model Bump {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  post              Post              @relation(fields: [postId], references: [id])
  postId            String
  oldPrice          Int?
  newPrice          Int?

  @@schema("public")
}

model Report {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  postId            String            @unique()
  post              Post              @relation(fields: [postId], references: [id])
  reportedPostId    String?
  reportedPost      Post?             @relation(fields: [reportedPostId], references: [id], name: "postReports")
  reportedCommentId String?
  reportedComment   Comment?          @relation(fields: [reportedCommentId], references: [id])
  reportedUserId    String
  reportedUser      User              @relation(fields: [reportedUserId], references: [id], name: "receivedReports")
  status            String

  @@schema("public")
}

model UserReview {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  postId            String            @unique()
  post              Post              @relation(fields: [postId], references: [id])
  reviewedUserId    String
  reviewedUser      User              @relation(fields: [reviewedUserId], references: [id], name: "receivedUserReviews")
  reviewedPostId    String
  reviewedPost      Post              @relation(fields: [reviewedPostId], references: [id], name: "postReviews")
  rating            Int
  status            String

  @@schema("public")
}

model Tag {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  type              String
  name              String
  description       String?
  position          Int
  posts             Post[]

  @@schema("public")
}

model Auction {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  endedAt           DateTime
  postId            String?           @unique()
  post              Post?             @relation(fields: [postId], references: [id])
  shippingCost      Int               @default(0)
  shippingType      String            @default("free")
  businessFunction  String
  status            String
  bids              Bid[]

  @@schema("public")
}

model Bid {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  canceledAt        DateTime?
  price             Int
  priceCurrency     String
  auctionId         String
  auction           Auction           @relation(fields: [auctionId], references: [id])
  bidderId          String
  bidder            User              @relation(fields: [bidderId], references: [id])
  status            String
  source            String

  @@schema("public")
}

model Term {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  name              String
  title             String
  content           String
  meta              Json?             @default("{}")

  @@schema("public")
}

model Version {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  deletedAt         DateTime?
  schemaName        String
  tableName         String
  op                String
  refId             String
  values            Json

  @@schema("audit")
}
