datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// NOTE: Used for code generation only

// generator prismaClassGenerator {
//   provider = "prisma-class-generator"
//   output = "./gen"
//   dryRun = false
// }

model User {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  username          String      @unique
  name              String?
  phoneNumber       String?     @unique
  socialAccounts    SocialAccount[]
  avatarURL         String?
  bot               Boolean     @default(false)
  members           Member[]
  sessions          Session[]
  userImages        UserImage[]
  offers            Offer[]
  demands           Demand[]
  swaps             Swap[]
  auctions          Auction[]
  bids              Bid[]
  auctionComments   AuctionComment[]
  posts             Post[]
  postComments      PostComment[]
  discordMessages   DiscordMessage[]
}

model UserImage {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  name              String
  url               String
  contentType       String?
  description       String?
  height            Int?
  width             Int?
  position          Int
  type              String
  refId             String
  tracked           Boolean
  source            String
  userId            String
  user              User          @relation(fields: [userId], references: [id])
}

model Member {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  groupId           String
  group             Group       @relation(fields: [groupId], references: [id])
  roles             Role[]
}

model SocialAccount {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  provider          String
  socialId          String
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  @@unique([provider, socialId])
}

model Session {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  sessionToken      String      @unique
  expires           DateTime
  userId            String
  user              User        @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  identifier        String
  token             String      @unique
  expires           DateTime

  @@unique([identifier, token])
}

model Role {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updateedAt        DateTime    @updatedAt
  deletedAt         DateTime?
  name              String      @unique
  position          Int
  hexColor          String      @default("#7f838e")
  groupId           String
  group             Group       @relation(fields: [groupId], references: [id])
  members           Member[]
}

model Group {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String      @unique
  slug              String?
  description       String?
  icon              String?
  position          Int
  members           Member[]
  roles             Role[]
  brands            Brand[]
  productCategories ProductCategory[]
  offers            Offer[]
  demands           Demand[]
  swaps             Swap[]
  auctions          Auction[]
  postCategories    PostCategory[]
  posts             Post[]
}

model PostCategory {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String
  slug              String?
  description       String?
  position          Int
  groupId           String
  group             Group       @relation(fields: [groupId], references: [id])
  posts Post[]
}

model ProductCategory {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String
  slug              String?
  description       String?
  position          Int
  groupId           String
  group             Group       @relation(fields: [groupId], references: [id])
  offers            Offer[]
  demands           Demand[]
  swaps             Swap[]
  auctions          Auction[]
}

model Brand {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String
  slug              String?
  description       String?
  logo              String?
  position          Int
  offers            Offer[]
  demands           Demand[]
  swaps             Swap[]
  auctions          Auction[]
  groups            Group[]
}

model Post {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  title             String
  slug              String?
  content           String
  source            String
  groupId           String
  group             Group         @relation(fields: [groupId], references: [id])
  postCategoryId    String
  postCategory      PostCategory  @relation(fields: [postCategoryId], references: [id])
  authorId          String
  author            User          @relation(fields: [authorId], references: [id])
  comments          PostComment[]
}

model PostComment {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  source            String
  authorId          String
  author            User          @relation(fields: [authorId], references: [id])
  content           String
  postId            String
  post              Post          @relation(fields: [postId], references: [id])
  parentId          String?
  parent            PostComment?  @relation("PostComments", fields: [parentId], references: [id])
  comments          PostComment[] @relation("PostComments")
}

model Offer {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  name              String
  slug              String?
  description       String?
  price             Int
  priceCurrency     String
  businessFunction  String
  status            String
  source            String
  groupId           String
  group             Group           @relation(fields: [groupId], references: [id])
  productCategoryId String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  sellerId          String
  seller            User            @relation(fields: [sellerId], references: [id])
  brandId           String?
  brand             Brand?          @relation(fields: [brandId], references: [id])
}

model Demand {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  name              String
  slug              String?
  description       String?
  price             Int
  priceCurrency     String
  businessFunction  String
  status            String
  source            String
  groupId           String
  group             Group           @relation(fields: [groupId], references: [id])
  productCategoryId String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  buyerId           String
  buyer             User            @relation(fields: [buyerId], references: [id])
  brandId           String?
  brand             Brand?          @relation(fields: [brandId], references: [id])
}

model Swap {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
  slug                String?
  name0               String
  description0        String?
  name1               String
  description1        String?
  price               Int
  priceCurrency       String
  businessFunction    String
  status              String
  source              String
  groupId             String
  group               Group           @relation(fields: [groupId], references: [id])
  productCategoryId   String
  productCategory     ProductCategory @relation(fields: [productCategoryId], references: [id])
  proposerId          String
  proposer            User            @relation(fields: [proposerId], references: [id])
  brandId             String?
  brand               Brand?          @relation(fields: [brandId], references: [id])
}

model Auction {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  endedAt           DateTime
  name              String
  slug              String?
  description       String?
  businessFunction  String
  source            String
  bids              Bid[]
  groupId           String
  group             Group             @relation(fields: [groupId], references: [id])
  brandId           String?
  brand             Brand?            @relation(fields: [brandId], references: [id])
  productCategoryId String
  productCategory   ProductCategory   @relation(fields: [productCategoryId], references: [id])
  sellerId          String
  seller            User              @relation(fields: [sellerId], references: [id])
  comments          AuctionComment[]
  status            String
}

model AuctionComment {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  source            String
  authorId          String
  author            User              @relation(fields: [authorId], references: [id])
  content           String
  auctionId         String
  auction           Auction           @relation(fields: [auctionId], references: [id])
  parentId          String?
  parent            AuctionComment?   @relation("AuctionComments", fields: [parentId], references: [id])
  comments          AuctionComment[]  @relation("AuctionComments")
}

model Bid {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  canceledAt        DateTime?
  price             Int
  priceCurrency     String
  auctionId         String
  auction           Auction           @relation(fields: [auctionId], references: [id])
  bidderId          String
  bidder            User              @relation(fields: [bidderId], references: [id])
  status            String
  source            String
}

model DiscordMessage {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  discordMessageId  String            @unique
  discordChannelId  String
  discordGuildId    String
  modelName         String
  modelId           String
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  bot               Boolean           @default(false)
}

model Term {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  name              String
  title             String
  content           String
  metaTitle         String
  metaDescription   String
}
