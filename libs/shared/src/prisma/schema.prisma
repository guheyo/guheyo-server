datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

// NOTE: Used for code generation only

// generator prismaClassGenerator {
//   provider = "prisma-class-generator"
//   output = "./gen"
//   dryRun = false
// }

model User {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String?
  username          String      @unique
  socialAccounts    SocialAccount[]
  avatarURL         String?
  bot               Boolean     @default(false)
  members           Member[]
  sessions          Session[]
  offers            Offer[]
  demands           Demand[]
  swaps             Swap[]
  auctions          Auction[]
  bids              Bid[]
  auctionComments   AuctionComment[]
  posts             Post[]
  postComments      PostComment[]
}

model Member {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  guildId           String
  guild             Guild       @relation(fields: [guildId], references: [id])
  roles             Role[]
}

model SocialAccount {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  provider          String
  socialId          String
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  @@unique([provider, socialId])
}

model Session {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  sessionToken      String      @unique
  expires           DateTime
  userId            String
  user              User        @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  identifier        String
  token             String      @unique
  expires           DateTime

  @@unique([identifier, token])
}

model Role {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updateedAt        DateTime    @updatedAt
  deletedAt         DateTime?
  name              String      @unique
  position          Int
  hexColor          String      @default("#000000")
  guildId           String
  guild             Guild       @relation(fields: [guildId], references: [id])
  members           Member[]
}

model Guild {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String      @unique
  description       String?
  icon              String?
  position          Int
  members           Member[]
  roles             Role[]
  brands            Brand[]
  productCategories ProductCategory[]
  offers            Offer[]
  demands           Demand[]
  swaps             Swap[]
  auctions          Auction[]
  postCategories    PostCategory[]
  posts             Post[]
}

model PostCategory {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String
  description       String?
  position          Int
  guildId           String
  guild             Guild       @relation(fields: [guildId], references: [id])
  posts Post[]
}

model ProductCategory {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String
  description       String?
  position          Int
  guildId           String
  guild             Guild       @relation(fields: [guildId], references: [id])
  offers            Offer[]
  demands           Demand[]
  swap0s            Swap[]      @relation("Swap0Category")
  swap1s            Swap[]      @relation("Swap1Category")
  auctions          Auction[]
}

model Brand {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deletedAt         DateTime?
  name              String
  description       String?
  logo              String?
  position          Int
  offers            Offer[]
  demands           Demand[]
  swap0s            Swap[]      @relation("Swap0Brand")
  swap1s            Swap[]      @relation("Swap1Brand")
  auctions          Auction[]
  guilds            Guild[]
}

model Post {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  title             String
  content           String
  guildId           String
  guild             Guild         @relation(fields: [guildId], references: [id])
  postCategoryId    String
  postCategory      PostCategory  @relation(fields: [postCategoryId], references: [id])
  authorId          String
  author            User          @relation(fields: [authorId], references: [id])
  images            PostImage[]
  comments          PostComment[]
}

model PostImage {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  name              String
  url               String
  height            String
  width             String
  position          Int
  postId            String
  post              Post          @relation(fields: [postId], references: [id])
}

model PostComment {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  authorId          String
  author            User          @relation(fields: [authorId], references: [id])
  content           String
  postId            String
  post              Post          @relation(fields: [postId], references: [id])
  parentId          String?
  parent            PostComment?  @relation("PostComments", fields: [parentId], references: [id])
  comments          PostComment[] @relation("PostComments")
}

model Offer {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  name              String
  description       String
  price             Int
  priceCurrency     String
  businessFunction  String
  status            String
  images            OfferImage[]
  guildId           String
  guild             Guild           @relation(fields: [guildId], references: [id])
  productCategoryId String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  sellerId          String
  seller            User            @relation(fields: [sellerId], references: [id])
  brandId           String?
  brand             Brand?          @relation(fields: [brandId], references: [id])
}

model OfferImage {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  name              String
  url               String
  height            String
  width             String
  position          Int
  offerId           String
  offer             Offer           @relation(fields: [offerId], references: [id])
}

model Demand {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  name              String
  description       String
  priceCurrency     String
  businessFunction  String
  status            String
  images            DemandImage[]
  guildId           String
  guild             Guild           @relation(fields: [guildId], references: [id])
  productCategoryId String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  buyerId           String
  buyer             User            @relation(fields: [buyerId], references: [id])
  brandId           String?
  brand             Brand?          @relation(fields: [brandId], references: [id])
}

model DemandImage {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  name              String
  url               String
  height            String
  width             String
  position          Int
  demandId          String
  demand            Demand          @relation(fields: [demandId], references: [id])
}

model Swap {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  deletedAt           DateTime?
  guildId             String
  guild               Guild           @relation(fields: [guildId], references: [id])
  price               Int
  priceCurrency       String
  name0               String
  description0        String
  name1               String
  description1        String
  status              String
  images              SwapImage[]
  brand0Id            String?
  brand0              Brand?          @relation("Swap0Brand", fields: [brand0Id], references: [id])
  brand1Id            String?
  brand1              Brand?          @relation("Swap1Brand", fields: [brand1Id], references: [id])
  productCategory0Id  String
  productCategory0    ProductCategory @relation("Swap0Category", fields: [productCategory0Id], references: [id])
  productCategory1Id  String
  productCategory1    ProductCategory @relation("Swap1Category", fields: [productCategory1Id], references: [id])
  proposerId          String
  proposer            User            @relation(fields: [proposerId], references: [id])
}

model SwapImage {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  name              String
  url               String
  height            String
  width             String
  position          Int
  target            Int
  swapId            String
  swap              Swap              @relation(fields: [swapId], references: [id])
}

model Auction {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  endedAt           DateTime
  name              String
  description       String
  images            AuctionImage[]
  bids              Bid[]
  guildId           String
  guild             Guild             @relation(fields: [guildId], references: [id])
  brandId           String?
  brand             Brand?            @relation(fields: [brandId], references: [id])
  productCategoryId String
  productCategory   ProductCategory   @relation(fields: [productCategoryId], references: [id])
  sellerId          String
  seller            User              @relation(fields: [sellerId], references: [id])
  comments          AuctionComment[]
  status            String
}

model AuctionImage {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  name              String
  url               String
  height            String
  width             String
  position          Int
  auctionId         String
  auction           Auction           @relation(fields: [auctionId], references: [id])
}

model AuctionComment {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  authorId          String
  author            User              @relation(fields: [authorId], references: [id])
  content           String
  auctionId         String
  auction           Auction           @relation(fields: [auctionId], references: [id])
  parentId          String?
  parent            AuctionComment?   @relation("AuctionComments", fields: [parentId], references: [id])
  comments          AuctionComment[]  @relation("AuctionComments")
}

model Bid {
  id                String            @id @default(uuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
  canceledAt        DateTime?
  price             Int
  priceCurrency     String
  auctionId         String
  auction           Auction           @relation(fields: [auctionId], references: [id])
  bidderId          String
  bidder            User              @relation(fields: [bidderId], references: [id])
  status            String
}

model DiscordMessageLinker {
  discordMessageId  String            @unique
  discordChannelId  String
  discordGuildId    String
  modelId           String
  modelName         String
}
