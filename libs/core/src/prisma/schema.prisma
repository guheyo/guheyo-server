datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
  output = "./client"
}

model User {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deleted         Boolean     @default(false)
  name            String?
  username        String      @unique
  socialAccounts  SocialAccount[]
  avatarURL       String?
  bot             Boolean     @default(false)
  roles           Role[]
  posts           Post[]
  images          Image[]
  keywords        Keyword[]
  sessions        Session[]
}

model SocialAccount {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deleted         Boolean     @default(false)
  provider        String
  socialId        String
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  refreshToken    String?
  accessToken     String?
  expiresAt       Int?
  tokenType       String?
  scope           String?
  idToken         String?
  sessionState    String?

  @@unique([provider, socialId])
}

model Session {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deleted       Boolean   @default(false)
  sessionToken  String    @unique
  expires       DateTime
  userId        String
  user          User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deleted       Boolean   @default(false)
  identifier    String
  token         String    @unique
  expires       DateTime

  @@unique([identifier, token])
}

model Role {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updateedAt  DateTime    @updatedAt
  deleted     Boolean     @default(false)
  name        String      @unique
  rank        Int?
  hexColor    String      @default("#000000")
  users       User[]
}

model Guild {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updateedAt  DateTime    @updatedAt
  deleted     Boolean     @default(false)
  name        String      @unique
  categories  Category[]
  rank        Int?
}

model Category {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updateedAt  DateTime    @updatedAt
  deleted     Boolean     @default(false)
  name        String      @unique
  guildId     String
  guild       Guild       @relation(fields: [guildId], references: [id])
  posts       Post[]
  rank        Int?
}

model Post {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updateedAt  DateTime    @updatedAt
  deleted     Boolean     @default(false)
  messageId   String?     @unique
  type        String
  title       String
  subTitle    String?
  price       Int
  nego        Boolean?    @default(false)
  content     String?
  published   Boolean     @default(false)
  closed      Boolean     @default(false)
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  images      Image[]
  tags        Tag[]
}

model Image {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updateedAt  DateTime    @updatedAt
  deleted     Boolean     @default(false)
  name        String
  size        Int
  url         String      @unique
  height      Int?
  width       Int?
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  postId      String?
  post        Post?       @relation(fields: [postId], references: [id])
}

model Tag {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updateedAt  DateTime    @updatedAt
  deleted     Boolean     @default(false)
  name        String      @unique
  posts       Post[]
}

model Keyword {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updateedAt  DateTime    @updatedAt
  deleted     Boolean     @default(false)
  name        String      @unique
  users       User[]
}